What happens when you initialize a repository? Why do you need to do it?
It creates a .git folder with metadata. This means that you can use git to track the history of changes to your files in that folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area is a transitional step where files that you wish to be tracked in the repository are added. It allows each commit to be represent a logical set of changes. If you change your mind, the files can be removed before it is added into the repository. If files are not added into the repository the changes cannot be tracked.

How can you use the staging area to make sure you have one commit per logical
change?
By adding to the staging area only changes that make logical sense for a single commit. Can also test that a single commit and examine the changes by using git diff and git diff --staged to examine the difference between the changes before adding and then the changes between staged and previous commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- Experimenting
- Ability to take risk without breaking existing code
- Preserving an existing version
- Open source forking
- Ability for many users to work on the code at the same time

How do the diagrams help you visualize the branch structure?
By being able to see where the fork took place. By being able to see checkouts that are unreachable. By being able to trace parents of a 'head'. Keep track of which branches contain which commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
All the commits from the most recent back to when the branches occured will be combined into a single branch (the merged branch). 
Represented as having two parents because the commits come from both branches and are represented in chronological order from most recent commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Automatic merging takes away some of the manual work of comparing different versions of files. Manual merging is a safety check if there is any ambiguity in the different versions of files that are being merged, so it requires human intervention to ensure that desirable code is incorporated. It is more time consuming though but necessary.
