How did viewing a diff between two versions of a file help you see the bug that
was introduced?
It isolates the changes to code visually so that coding errors can be quickly found instead of searching through the entire code line by line.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
- Ability to try out code and to revert to an older version if it didn't work.
- Ability to study how code have evolved and the reason for changes gives better understanding of the purpose of the code
- Greater flexibility in coding
- Learn more new stuff and trying these out without fear that code will break
	
What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
Pros:
- more control on when to commit e.g., after a logical change
- not cluster different changes together 
- puts responsibility on developer to use it correctly
- allows collaboration in a logical manner
- ability to delegate authority to lead developer to only commit code
- ability to review code before commit

Cons:
- requires judgement
- forgetting to commit
- needs discipline
- possible different standards between developers
- code may not be completely functional yet
- may not be a logical commit

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?
- Probably each file in google docs is not expected to be related and could stand alone on its own as a logical unit 
- Code files could have several inter-related files e.g., css, html, js files and changes in one of them affects the other files too and should be treated as a logical unit
- Each version control system is designed with specific functionality in mind
	
How can you use the commands git log and git diff to view the history of files?
- git log to see history of commits and what they were for
- git log gives an overview of commits
- git diff to view the actual lines of codes that were changed between 2 commits

How might using version control make you more confident to make changes that
could break something?
- Ability to go back to a commit before a bug was introduced means that don't have to spend hours debugging
- Freedom to test various strategies and ideas knowing that you can go back to a state before these strategies
- Can also save the state of various strategies and ideas in case want to use these later
- Allow collaboration with other developers concurrently
- Allow systematic code reviews

Now that you have your workspace set up, what do you want to try using Git for?

    For developing and tracking my own projects
	

